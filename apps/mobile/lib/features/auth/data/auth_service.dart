import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/foundation.dart';

/// ===============================================================
/// üîê AuthService ‚Äî Servicio central de autenticaci√≥n
/// ===============================================================
/// Maneja el flujo de:
///  - Registro de usuarios
///  - Inicio de sesi√≥n
///  - Cierre de sesi√≥n
///  - Escucha en tiempo real del estado de autenticaci√≥n
/// ===============================================================
class AuthService {
  final FirebaseAuth _auth = FirebaseAuth.instance;

  /// üîÑ Escucha global de cambios de autenticaci√≥n
  Stream<User?> get authStateChanges => _auth.authStateChanges();

  /// üß© Obtiene el usuario actual
  User? get currentUser => _auth.currentUser;

  /// üÜï Crear un nuevo usuario con email y contrase√±a
  Future<User?> signUp(String email, String password) async {
    try {
      final result = await _auth.createUserWithEmailAndPassword(
        email: email.trim(),
        password: password.trim(),
      );
      return result.user;
    } on FirebaseAuthException catch (e) {
      debugPrint('‚ö†Ô∏è Error en signUp: ${e.code} ‚Äî ${e.message}');
      throw Exception(_mapFirebaseError(e.code));
    } catch (e) {
      debugPrint('‚ö†Ô∏è Error desconocido en signUp: $e');
      throw Exception('Error al registrar el usuario.');
    }
  }

  /// üîë Iniciar sesi√≥n con email y contrase√±a
  Future<User?> signIn(String email, String password) async {
    try {
      final result = await _auth.signInWithEmailAndPassword(
        email: email.trim(),
        password: password.trim(),
      );
      return result.user;
    } on FirebaseAuthException catch (e) {
      debugPrint('‚ö†Ô∏è Error en signIn: ${e.code} ‚Äî ${e.message}');
      throw Exception(_mapFirebaseError(e.code));
    } catch (e) {
      debugPrint('‚ö†Ô∏è Error desconocido en signIn: $e');
      throw Exception('Error al iniciar sesi√≥n.');
    }
  }

  /// üö™ Cerrar sesi√≥n del usuario actual
  Future<void> signOut() async {
    try {
      await _auth.signOut();
      debugPrint('‚úÖ Sesi√≥n cerrada correctamente.');
    } on FirebaseAuthException catch (e) {
      debugPrint('‚ö†Ô∏è Error al cerrar sesi√≥n: ${e.code} ‚Äî ${e.message}');
      throw Exception('No se pudo cerrar sesi√≥n. Intenta de nuevo.');
    } catch (e) {
      debugPrint('‚ö†Ô∏è Error desconocido al cerrar sesi√≥n: $e');
      throw Exception('Ocurri√≥ un error al cerrar sesi√≥n.');
    }
  }

  /// üß† Traductor de errores de FirebaseAuth a mensajes m√°s claros
  String _mapFirebaseError(String code) {
    switch (code) {
      case 'invalid-email':
        return 'El correo electr√≥nico no es v√°lido.';
      case 'user-disabled':
        return 'Esta cuenta ha sido desactivada.';
      case 'user-not-found':
        return 'No se encontr√≥ ninguna cuenta con ese correo.';
      case 'wrong-password':
        return 'Contrase√±a incorrecta.';
      case 'email-already-in-use':
        return 'Este correo ya est√° registrado.';
      case 'weak-password':
        return 'La contrase√±a es demasiado d√©bil.';
      default:
        return 'Ocurri√≥ un error inesperado. Intenta de nuevo.';
    }
  }
}
